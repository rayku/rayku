<?php

/**
 * profile actions.
 *
 * @package    elifes
 * @subpackage profile
 * @author     Adam A Flynn <adamaflynn@criticaldevelopment.net>
 */
 
class profileActions extends sfActions
{
	/**
	* Executes index action
	*
	*/
	public function executeIndex()
	{
    
	  // if( $this->hasRequestParameter('username') )
     
	 
	 $c = new Criteria();
	 $c->add(UserPeer::USERNAME,$this->getRequestParameter('username'));
	 $user = UserPeer::doSelectOne($c);
	

//	  $user = UserPeer::getByUsername($this->getRequestParameter('username'));
    
    /*if( !isset( $user ) || !$user )
    {
      if( $this->getUser()->isAuthenticated() )
        $user = $this->getUser()->getRaykuUser();
      else
        return sfView::ERROR;
    }*/


    $this->user = $user;

    $this->current = $this->getUser()->getRaykuUser();
		
		if (sfWebRequest::POST === $this->getRequest()->getMethod())
		{
			$comment = $this->getRequestParameter('content');
			if($this->getRequestParameter('action_comment') && $comment != '')
			{			
				$poster = $this->getUser()->getRaykuUser();

        $poster->createShoutFor($this->user, $comment);
	
        $this->redirect('@profile?username=' . $this->user->getUsername());
			}
		}
			
		
	}
	public function executeEdit()
	{
		$user = UserPeer::getByUsername($this->getRequestParameter('username'));
		
		// make sure it's a valid user, and that we're editing our own profile
		if (!$user instanceof User)
		{
			$this->error = 'No such user exists.';
			$this->setTemplate('_error');
			return sfView::SUCCESS;
		}
		else if (!$this->getUser()->getRaykuUser()->equals($user))
		{
			$this->error = 'You do not have permission to edit this user\'s profile.';
			$this->setTemplate('_error');
			return sfView::SUCCESS;
		}
		
		// if form is submitted, persist the data
		if (sfWebRequest::POST === $this->getRequest()->getMethod())
		{
			$user->setName($this->getRequestParameter('realname'));
			$user->setEmail($this->getRequestParameter('email'));
			$user->setGender($this->getRequestParameter('user[gender]'));
			$user->setHometown($this->getRequestParameter('hometown'));
			$user->setHomePhone($this->getRequestParameter('home_phone'));
			$user->setMobilePhone($this->getRequestParameter('mobile_phone'));
			
      $birthdate = RaykuCommon::dateArrayToString( $this->getRequestParameter('birthdate') );
  		$user->setBirthdate( $birthdate );
      
			$user->setAddress($this->getRequestParameter('address'));
			$user->setRelationshipStatus($this->getRequestParameter('user[relationshipstatuse]'));
			$user->setAboutMe($this->getRequestParameter('about_me'));
			$user->setUserInterestsFromString($this->getRequestParameter('hobbies'));
			
			// if the password is set
			if ('' !== $this->getRequestParameter('password1'))
			{
				$user->setPassword($this->getRequestParameter('password1'));
			}
			
			// set the 'show xxx' params..
			$user->setShowEmail($this->getRequestParameter('show_email', 0));
			$user->setShowGender($this->getRequestParameter('show_gender', 0));
			$user->setShowHometown($this->getRequestParameter('show_hometown', 0));
			$user->setShowHomePhone($this->getRequestParameter('show_home_phone', 0));
			$user->setShowMobilePhone($this->getRequestParameter('show_mobile_phone', 0));
			$user->setShowBirthdate($this->getRequestParameter('show_birthdate', 0));
			$user->setShowAddress($this->getRequestParameter('show_address', 0));
			$user->setShowRelationshipStatus($this->getRequestParameter('show_relationship_status', 0));
			$user->setShowHobbies($this->getRequestParameter('show_hobbies', 0));

			$user->save();
			
			$this->redirect('@profile?username=' . $user->getUsername());
		}
		
		// passing to view
		$this->user = $user;
	}
	
	public function handleErrorEdit()
	{
		$user = UserPeer::getByUsername($this->getRequestParameter('username'));
		
		// make sure it's a valid user, and that we're editing our own profile
		if (!$user instanceof User)
		{
			$this->error = 'No such user exists.';
			$this->setTemplate('_error');
			return sfView::SUCCESS;
		}
		else if (!$this->getUser()->getRaykuUser()->equals($user))
		{
			$this->error = 'You do not have permission to edit this user\'s profile.';
			$this->setTemplate('_error');
			return sfView::SUCCESS;
		}
		
		// passing to view
		$this->user = $user;
		
		return sfView::SUCCESS;
	}

	public function executeCategories()
	{
	
		$this->user=$this->getRequestParameter('userid');
		
		$c=new Criteria();
		$c->addJoin(CategoryPeer::ID,ExpertCategoryPeer::CATEGORY_ID,Criteria::JOIN);
		$c->add(ExpertCategoryPeer::USER_ID,$this->getRequestParameter('userid'));
		$this->usercategories=CategoryPeer::doSelect($c);
		
		
		$cat = new Criteria();
		$subSelect = "category.id NOT IN (
			SELECT
				  category_id
			FROM
				  expert_category
			WHERE
				 expert_category.user_id = ".$this->getRequestParameter('userid')."
			)";
			
		$cat->add(CategoryPeer::ID, $subSelect, Criteria::CUSTOM);
		$this->unjoinedcategories = CategoryPeer::doSelect($cat);
		
	}
	
	public function executeJoinCategory()
	{
	
				$this->user=$this->getRequestParameter('userid');
				
				$selcategories=$this->getRequestParameter('category');
			
				foreach($selcategories as $categoryid) {
				
				$this->expertcat=new ExpertCategory();
				$this->expertcat->setUserId($this->user);
				$this->expertcat->setCategoryId($categoryid);
				$this->expertcat->save();
				
				}
			
	
	}
	
	public function executeUnjoinExpert()
	{
	
		$this->catid=$this->getRequestParameter('catid');
		$this->user=$this->getRequestParameter('user');
		
		
		$c=new Criteria();
		$c->add(ExpertCategoryPeer::USER_ID,$this->getRequestParameter('user'));
		$c->add(ExpertCategoryPeer::CATEGORY_ID,$this->getRequestParameter('catid'));
		$category=ExpertCategoryPeer::doSelectOne($c);
		
		$category->delete();
		
	
	}
	public function executeShowAvatar()
	{
		$user = UserPeer::retrieveByPK($this->getRequestParameter('user_id'));
		
		$this->forward404Unless($user instanceof User);

    $allowedSizes = array(1, 2, 3, 4);
    if( !in_array( $this->getRequestParameter('size'), $allowedSizes ) )
      $size = 1;
    else
      $size = $this->getRequestParameter('size');


    switch( $size )
    {
      case 1:
          $fileSuffix = '';
        break;
      default:
          $fileSuffix = "_$size";
        break;
    }
		
		$uploadDir = sfConfig::get('sf_upload_dir') . DIRECTORY_SEPARATOR . sfConfig::get('app_general_avatar_folder');
		$file = $uploadDir . DIRECTORY_SEPARATOR . $user->getId() . $fileSuffix;
		
		if (!is_file($file))
		{
			$file = sfConfig::get('sf_web_dir') . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR
        . sfConfig::get('app_general_avatar_default_image') . $fileSuffix
        . '.' . sfConfig::get('app_general_avatar_default_image_type');
		}

		$this->getResponse()->clearHttpHeaders();
		$this->getResponse()->setHttpHeader('Content-Length', (string)(filesize($file)), true);
        $this->getResponse()->setHttpHeader('Content-Transfer-Encoding', 'binary', true);
		$this->getResponse()->setContentType('image/jpeg');
		$this->getResponse()->sendHttpHeaders();
		
		readfile($file);
		exit;	// for some reason, this fixed some bugs with sfWebResponse trying to output again later (despite sfView::NONE returned)
		
		return sfView::NONE;
	}
	
	public function executeEmailNotify()
	{
	
		$c = new Criteria();		
		$c->add(NotificationEmailsPeer::USER_ID,$this->getRequestParameter('user_id'));
		$notifies = NotificationEmailsPeer::doSelectOne($c);
		
		if($notifies != NULL)
		{
			$notifies->setOnOff($this->getRequestParameter('st'));
			$notifies->save();
		
		}
		else
		{
			$c = new NotificationEmails();
			$c->setUserId($this->getRequestParameter('user_id'));
			$c->setOnOff($this->getRequestParameter('st'));
			$c->save();
			
		
		}
		
		$c = new Criteria();
		$c->add(UserPeer::ID, $this->getRequestParameter('user_id'));
		$user = UserPeer::doSelectOne($c);
		
		$this->redirect('@profile?username='.$user->getUsername());
		
		
		
	}
	
}
