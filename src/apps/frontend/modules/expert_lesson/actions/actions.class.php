<?php
// auto-generated by sfPropelCrud
// date: 2009/09/07 03:54:49
?>
<?php
/**
 * expert_lesson actions.
 *
 * @package    elifes
 * @subpackage expert_lesson
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
 
 
 
class expert_lessonActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('expert_lesson', 'list');
  }

  public function executeList()
  {
    	
		$c=new Criteria();
		
		$c->add(ExpertLessonPeer::USER_ID,$this->getUser()->getRaykuUserId());
		
		$this->expert_lessons = ExpertLessonPeer::doSelect($c);
  }

  public function executeShow()
  {
    $this->expert_lesson = ExpertLessonPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->getUser()->setAttribute('expert_lesson_id',$this->getRequestParameter('id'));
	$this->forward404Unless($this->expert_lesson);
  }

  public function executeCreate()
  {
  	
			
	if($this->getUser()->getAttribute('expert_lesson_id'))
	{
		$this->getUser()->setAttribute('expert_lesson_id','');
	}
  
    $this->expert_lesson = new ExpertLesson();
	
	$this->expert_lesson->setUserId($this->getUser()->getRaykuUserId());

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    
	
		
	$this->expert_lesson = ExpertLessonPeer::retrieveByPk($this->getRequestParameter('id'));
    
	if($this->expert_lesson->getId())
	{
		$this->getUser()->setAttribute('expert_lesson_id',$this->expert_lesson->getId());
	}
	
	
	$this->forward404Unless($this->expert_lesson);
  }

  public function executeUpdate()
  {
    
		
	if (!$this->getRequestParameter('id'))
    {
      $expert_lesson = new ExpertLesson();
    }
    else
    {
      $expert_lesson = ExpertLessonPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($expert_lesson);
    }

	
	//$expert_lesson->setId($this->getRequestParameter('id'));
    $expert_lesson->setTitle($this->getRequestParameter('title'));
    $expert_lesson->setContent($this->getRequestParameter('content'));
    $expert_lesson->setUserId($this->getRequestParameter('user_id'));
	$expert_lesson->setPrice($this->getRequestParameter('price'));
    $expert_lesson->save();
	
	
	if($expert_lesson->getId())
	{
		$this->getUser()->setAttribute('expert_lesson_id',$expert_lesson->getId());
	}
	
    return $this->redirect('expert_lesson/show?id='.$expert_lesson->getId());
  }

  public function executeDelete()
  {
    $expert_lesson = ExpertLessonPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($expert_lesson);

    $expert_lesson->delete();

    return $this->redirect('expert_lesson/list');
  }
  
  public function executeSchedule()
  {
		// sfProjectConfiguration::getActive()->loadHelpers('Partial');
	
	$date = $this->getRequestParameter('date');
	
	$timing = $this->getRequestParameter('timing');
	
	$timings = implode("|",$timing);  
	
	$exp_id = $this->getUser()->getRaykuUserId(); 
		
				
		$c = new ExpertLessonSchedule();
		$c->setDate($date);
		$c->setTimings($timings);
		$c->setUserId($exp_id);
		$c->save();
		
	
	
		// return $this->renderText(get_partial('schedule', array('date' => $date, 'timing' => $timing,'expert_id' => $this->getUser()->getRaykuUserId() )));
		
	return $this->redirect('expert_lesson/calendar');
	
  }
  
 	
	public function executeCalendar()
	{
	
			$expert_id = $this->getUser()->getRaykuUserId();
			$date = mktime(0,0,0,date('m'),date('d'),date('Y'));
			
			$c = new Criteria();
			$c->add(ExpertLessonSchedulePeer::USER_ID,$expert_id);
			$c->addAscendingOrderByColumn(ExpertLessonSchedulePeer::DATE);
			$this->lessondates = ExpertLessonSchedulePeer::doSelect($c); 
			
			$c = new Criteria();
			$c->add(ExpertAvailableDaysPeer::EXPERT_ID,$expert_id);
			$this->lessondays = ExpertAvailableDaysPeer::doSelect($c);
			
			$c = new Criteria();
			$c->add(ExpertAvailableDaysPeer::EXPERT_ID,$expert_id);
			$this->availabledays= ExpertAvailableDaysPeer::doSelect($c);
			
	
	}
	public function executeAddSchedules()
	{
			if($this->getRequestParameter('date') )
			{
				$selecteddate = $this->getRequestParameter('date');
			}
			
			if($this->getRequestParameter('timings')) 
			{
			
				$timings = implode("|",$this->getRequestParameter('timings'));		
			}
			
			
			$date = new ExpertLessonSchedule();
			$date->setTimings($timings);
			$date->setDate($selecteddate);
			$date->setUserId($this->getUser()->getRaykuUserId());
			$date->save();			
			
	
		return $this->redirect('expert_lesson/calendar');
	
	}
	
	public function executeScheduledays()
	{
	
		$expert_id= $this->getUser()->getRaykuUserId() ;
		$days=$this->getRequestParameter('days');
		
		$monday ='0';
		$tuesday = '0';
		$wednesday = '0';
		$thursday = '0';
		$friday = '0';
		$saturday = '0';
		$sunday = '0';
		
		foreach($days as $day)
		{
			
			if($day == 'mon')
			{
				$monday = '1';
			}
			elseif($day == 'tue')
			{
				$tuesday = '1';
			}
			elseif($day == 'wed')
			{
				$wednesday = '1';
			}
			elseif($day == 'thur')
			{
				$thursday = '1';
			}
			elseif($day == 'fri')
			{
				$friday = '1';
			}
			elseif($day == 'sat')
			{
				$saturday = '1';
			}
			else
			{
				$sunday = '1';
			}
		}
		
		$timings = implode("|",$this->getRequestParameter('timings'));		
		
		$schedulesdays = new ExpertAvailableDays();
		$schedulesdays->setExpertId($expert_id);
		$schedulesdays->setMonday($monday);
		$schedulesdays->setTuesday($tuesday);
		$schedulesdays->setWednesday($wednesday);
		$schedulesdays->setThursday($thursday);
		$schedulesdays->setFriday($friday);
		$schedulesdays->setSaturday($saturday);
		$schedulesdays->setSunday($sunday);
		$schedulesdays->setMonday($monday);
		$schedulesdays->setTimings($timings);
		$schedulesdays->save();
		
		return $this->redirect('expert_lesson/calendar');
		
	}
	
	
	public function executeScheduledates()
	{
	
			$expert_id= $this->getUser()->getRaykuUserId() ;
			$timings = implode("|",$this->getRequestParameter('timings'));		 
			$date = mktime(0,0,0,date('m'),date('d'),date('Y'));
			
			$scheduledates = new ExpertLessonSchedule();
			$scheduledates->setUserId($expert_id);
			$scheduledates->setDate($date);
			$scheduledates->setTimings($timings);
			$scheduledates->save();
			
			return $this->redirect('expert_lesson/calendar');
	
	}
	
	public function executeDeletedays()
	{
		$c = new Criteria();
		$c->add(ExpertAvailableDaysPeer::ID,$this->getRequestParameter('id'));
		$days = ExpertAvailableDaysPeer::doSelectOne($c);
		
		$days->delete(); 
		
		return $this->redirect('expert_lesson/calendar');
	}
	
	public function executeDeletedates()
	{
		$c = new Criteria();
		$c->add(ExpertLessonSchedulePeer::ID,$this->getRequestParameter('id'));
		$days = ExpertLessonSchedulePeer::doSelectOne($c);
		
		$days->delete(); 
		
		return $this->redirect('expert_lesson/calendar');
	}
  
}
