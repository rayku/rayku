package com.livestream{		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.*;	import flash.media.Video;	import flash.media.Camera;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.display.LoaderInfo;	import fl.controls.Button;		public class Reciever extends MovieClip	{		private var paramObj:Object		private var ns : NetStream;		private var nc : NetConnection;		private var _vid : Video;		private var user_id : String;				public function Reciever() : void {			getFlashVars();			nc = new NetConnection();			nc.client = this;			nc .addEventListener(NetStatusEvent.NET_STATUS, handleConnection);			nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR, handleAsync);			nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleError);						nc.connect('rtmp://209.188.92.237/shared');		}				private function getFlashVars () : void {			paramObj = LoaderInfo(this.root.loaderInfo).parameters;			user_id = paramObj.user_id;			trace(user_id);			if ( user_id != null ){				user_txt.text = user_id;			}		}				private function publishLiveStream () : void {			trace('publishing live stream');			ns = new NetStream(nc);			ns.addEventListener(NetStatusEvent.NET_STATUS, handleConnection);									//var cam : Camera = Camera.getCamera();						_vid = new Video(320, 240);			//_vid.attachCamera(cam);			_vid.attachNetStream(ns);			addChild(_vid);			startRecieving();			ns.client = this;		}				public function startRecieving () : void {				ns.play(String(user_id));		}				private function handleAsync ( e:AsyncErrorEvent ) : void {			trace('AsyncErrorEvent' + e );		}				private function handleError ( e:SecurityErrorEvent ) : void {			trace('Security Error' + e);		}				private function activityHandler ( e:ActivityEvent ) : void {			trace('activityMHandler: ' + e );			trace('activating: ' + e.activating);		}				public function handleConnection(e:NetStatusEvent):void{			trace("Calling handleConnection() now" + e.info.code);			switch( e.info.level ){				case "error":					trace("LEVEL ERROR");				break;			}						switch( e.info.code ){				case  "NetConnection.Connect.Success":					trace("Connected successfully to server.");					publishLiveStream();				break;								case "NetConnection.Connect.Rejected":					trace("REJECTED");				break;								case "NetConnection.Connect.Failed":					trace("FAILED");				break;								case "NetConnection.Connect.Closed":					trace("CLOSED");				break;								case "NetStream.Publish.Start":					trace("START");				break;								case "NetStream.Publish.BadName":					trace("BAD NAME");				break;								case "NetStream.Pause.Notify":					trace("PAUSE");				break;								case "NetStream.Unpause.Notify":					trace("UNPAUSE");				break;								case "NetStream.Play.StreamNotFound":					trace("STREAM NOT FOUND");				break;								case "NetStream.Record.NoAccess":					trace("NO ACCESS");				break;			}								}			}	}